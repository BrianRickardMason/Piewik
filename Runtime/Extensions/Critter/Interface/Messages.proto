message Header
{
    optional uint32 id = 1;
}

message Payload
{
    optional bytes payload = 1;
}

message Envelope
{
    optional Header  header  = 1;
    optional Payload payload = 2;
}

message CritterData
{
    optional string type = 1;
    optional string nick = 2;
}

message HeartbeatAnnouncement
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional double      timestamp   = 3;
}

message PresentYourselfRequest
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional CritterData receiver    = 3;
}

message PresentYourselfResponse
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional CritterData receiver    = 3;
}

message PokeAnnouncement
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
}

// LoadGraphAndWorkRequest/Response: GraphYeeti -> Cribrarian -> GraphYeeti.

message GraphData
{
    optional string graphName = 1;
}

message WorkData
{
    optional string graphName = 1;
    optional string workName  = 2;
}

message WorkPredecessorData
{
    optional string workName            = 1;
    optional string predecessorWorkName = 2;
}

message LoadGraphAndWorkRequest
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
}

message LoadGraphAndWorkResponse
{
    optional string              messageName      = 1;
    optional CritterData         sender           = 2;
    optional CritterData         receiver         = 3;
    repeated GraphData           graphs           = 4;
    repeated WorkData            works            = 5;
    repeated WorkPredecessorData workPredecessors = 6;
}

// CantExecuteWorkNow: Worker -> Balancer.

message CantExecuteWorkNowAnnouncement
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional CritterData receiver    = 3;
    optional string      graphName   = 4;
    optional uint32      cycle       = 5;
    optional string      workName    = 6;
}

// LoadWorkDetailsRequest/Response: Worker -> Cribrarian -> Worker.

message WorkDetailsData
{
    optional string workName    = 1;
    optional uint32 softTimeout = 2;
    optional uint32 hardTimeout = 3;
    optional uint32 dummy       = 4;
}

message LoadWorkDetailsRequest
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
}

message LoadWorkDetailsResponse
{
    optional string          messageName = 1;
    optional CritterData     sender      = 2;
    optional CritterData     receiver    = 3;
    repeated WorkDetailsData details     = 4;
}

//
// An election.
//

//
// Any -> Cribrarian.
//
message Command_Election_Req
{
    optional string messageName = 1;
    optional string critthash   = 2;
    optional string crittnick   = 3;
}

//
// Cribrarian -> Any.
//
// TODO: Change crittnick to senderCrittnick.
message Command_Election_Res
{
    optional string messageName = 1;
    optional string critthash   = 2;
    optional string crittnick   = 3;
}

//
// A graph execution.
//

//
// Criduler -> GraphYeeti.
//
message Command_ExecuteGraph_Req
{
    optional string messageName             = 1;
    optional string graphExecutionCritthash = 2;
    optional string graphName               = 3;
}

//
// GraphYeeti -> Criduler.
//
message Command_ExecuteGraph_Res
{
    optional string messageName             = 1;
    optional string graphExecutionCritthash = 2;
}

//
// GraphYeeti -> Cribrarian.
//
message Command_DetermineGraphCycle_Req
{
    optional string messageName             = 1;
    optional string graphExecutionCritthash = 2;
    optional string graphName               = 3;
}

//
// Cribrarian -> GraphYeeti.
//
message Command_DetermineGraphCycle_Res
{
    optional string messageName             = 1;
    optional string graphExecutionCritthash = 2;
    optional string graphName               = 3;
    optional uint32 graphCycle              = 4;
}

//
// GraphYeeti -> Balancer.
//
message Command_OrderWorkExecution_Req
{
    optional string messageName             = 1;
    optional string graphExecutionCritthash = 2;
    optional string graphName               = 3;
    optional uint32 graphCycle              = 4;
    optional string workExecutionCritthash  = 5;
    optional string workName                = 6;
}

//
// Balancer -> GraphYeeti.
//
message Command_OrderWorkExecution_Res
{
    optional string messageName             = 1;
    optional string graphExecutionCritthash = 2;
    optional string graphName               = 3;
    optional uint32 graphCycle              = 4;
    optional string workExecutionCritthash  = 5;
    optional string workName                = 6;
}

//
// Balancer -> Worker.
//
message Command_ExecuteWork_Req
{
    optional string messageName             = 1;
    optional string receiverCrittnick       = 2;
    optional string graphExecutionCritthash = 3;
    optional string graphName               = 4;
    optional uint32 graphCycle              = 5;
    optional string workExecutionCritthash  = 6;
    optional string workName                = 7;
}

//
// Worker -> Balancer.
//
message Command_ExecuteWork_Res
{
    optional string messageName             = 1;
    optional string graphExecutionCritthash = 2;
    optional string graphName               = 3;
    optional uint32 graphCycle              = 4;
    optional string workExecutionCritthash  = 5;
    optional string workName                = 6;
}

//
// Worker -> Cribrarian.
//
message Command_DetermineWorkCycle_Req
{
    optional string messageName             = 1;
    optional string graphExecutionCritthash = 2;
    optional string graphName               = 3;
    optional uint32 graphCycle              = 4;
    optional string workExecutionCritthash  = 5;
    optional string workName                = 6;
}

//
// Cribrarian -> Worker.
//
message Command_DetermineWorkCycle_Res
{
    optional string messageName             = 1;
    optional string graphExecutionCritthash = 2;
    optional string graphName               = 3;
    optional uint32 graphCycle              = 4;
    optional string workExecutionCritthash  = 5;
    optional string workName                = 6;
    optional uint32 workCycle               = 7;
}
