// Copyright (C) 2012 Piewik Project.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of the project nor the names of its contributors
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.

message Header
{
    optional uint32 id = 1;
}

message Payload
{
    optional bytes payload = 1;
}

message Envelope
{
    optional Header  header  = 1;
    optional Payload payload = 2;
}

message CritterData
{
    optional string type = 1;
    optional string nick = 2;
}

message HeartbeatAnnouncement
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional double      timestamp   = 3;
}

message PresentYourselfRequest
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional CritterData receiver    = 3;
}

message PresentYourselfResponse
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional CritterData receiver    = 3;
}

message PokeAnnouncement
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
}

message ExecuteGraphAnnouncement
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional string      graphName   = 3;
}

// LoadGraphAndWorkRequest/Response: GraphYeeti -> Cribrarian -> GraphYeeti.

message GraphData
{
    optional string graphName = 1;
}

message WorkData
{
    optional string graphName = 1;
    optional string workName  = 2;
}

message WorkPredecessorData
{
    optional string workName            = 1;
    optional string predecessorWorkName = 2;
}

message LoadGraphAndWorkRequest
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
}

message LoadGraphAndWorkResponse
{
    optional string              messageName      = 1;
    optional CritterData         sender           = 2;
    optional CritterData         receiver         = 3;
    repeated GraphData           graphs           = 4;
    repeated WorkData            works            = 5;
    repeated WorkPredecessorData workPredecessors = 6;
}

// DetermineGraphCycleRequest/Response: GraphYeeti -> Cribrarian -> GraphYeeti.

message DetermineGraphCycleRequest
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional string      graphName   = 3;
}

message DetermineGraphCycleResponse
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional CritterData receiver    = 3;
    optional string      graphName   = 4;
    optional uint32      cycle       = 5;
}

// CommandWorkExecutionAnnouncement: GraphYeeti -> Balancer.

message CommandWorkExecutionAnnouncement
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional string      graphName   = 3;
    optional uint32      cycle       = 4;
    optional string      workName    = 5;
}

// ExecuteWorkAnnouncement: Balancer -> Worker.

message ExecuteWorkAnnouncement
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional CritterData receiver    = 3;
    optional string      graphName   = 4;
    optional uint32      cycle       = 5;
    optional string      workName    = 6;
}

// DetermineWorkCycleRequest/Response: Worker -> Cribrarian -> Worker.

message DetermineWorkCycleRequest
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional string      graphName   = 3;
    optional uint32      cycle       = 4;
    optional string      workName    = 5;
}

message DetermineWorkCycleResponse
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional CritterData receiver    = 3;
    optional string      graphName   = 4;
    optional uint32      cycle       = 5;
    optional string      workName    = 6;
    optional uint32      workCycle   = 7;
}

// ReportFinishedWorkAnnouncement: Worker -> GraphYeeti.

// TODO: Add missing information on whom inform about the result.

message ReportFinishedWorkAnnouncement
{
    optional string      messageName = 1;
    optional CritterData sender      = 2;
    optional string      graphName   = 3;
    optional uint32      graphCycle  = 4;
    optional string      workName    = 5;
    optional uint32      workCycle   = 6;
    optional bool        result      = 7;
}
